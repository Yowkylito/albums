package com.example.gopanda.view.fragments

import android.Manifest
import android.annotation.SuppressLint
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Context.NOTIFICATION_SERVICE
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.Canvas
import android.location.Geocoder
import android.location.Location
import android.net.Uri
import android.os.Bundle
import android.os.Looper
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import androidx.core.graphics.drawable.IconCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.gopanda.R
import com.example.gopanda.databinding.FragmentOrderDetailsBinding
import com.example.gopanda.models.FragmentsData
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.LatLngBounds
import com.google.android.gms.maps.model.Marker
import com.google.android.gms.maps.model.MarkerOptions
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException
import java.util.Locale


@Suppress("DEPRECATION")
class OrderDetails(
    private val fragmentDatas: FragmentsData,
) : Fragment(),
    OnMapReadyCallback {
    private lateinit var binding: FragmentOrderDetailsBinding
    private lateinit var map: GoogleMap
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var locationCallback: LocationCallback
    private var notificationShown = false
    private var currentLocationMarker: Marker? = null
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?,
    ): View? {

        // Inflate the layout for this fragment
        binding = FragmentOrderDetailsBinding.inflate(inflater, container, false)
        binding.setDataToText()
        // Initialize the FusedLocationProviderClient
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireContext())

        // Set up the location callback
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                locationResult.lastLocation?.let { location ->
                    // Log the location
                    Log.i("LocationUpdate", "Location: ${location.latitude}, ${location.longitude}")
                    addCurrentLocationMarker(location)
                    //  updateCurrentLocationMarker(location)
                    // Check if the user is near the pickup point
                    checkProximityToPickup(location)
                }
            }
        }

        // Start location updates
        startLocationUpdates()

        binding.acceptOrder()
        return binding.root
    }



    private fun startLocationUpdates() {
        val locationRequest = LocationRequest.Builder(
            LocationRequest.PRIORITY_HIGH_ACCURACY, 2000
        ).apply {
            setMinUpdateIntervalMillis(2000)
            setMaxUpdateDelayMillis(2000)
        }.build()

        if (ActivityCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {

            return
        }
        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.getMainLooper())
    }
  /*  private fun updateCurrentLocationMarker(location: Location) {
        val currentLatLng = LatLng(location.latitude, location.longitude)

        // Add the marker for the first time
        map.addMarker(
            MarkerOptions()
                .position(currentLatLng)
                .icon(BitmapDescriptorFactory.fromBitmap(getBitmapFromDrawable(R.drawable.logo)!!))
                .title("Your Location")
        )

    }*/
    private fun addCurrentLocationMarker(location: Location) {
        val currentLatLng = LatLng(location.latitude, location.longitude)
        if (::map.isInitialized) {
            
            map.addMarker(
                MarkerOptions()
                    .position(currentLatLng)
                    .icon(BitmapDescriptorFactory.fromBitmap(getBitmapFromDrawable(R.drawable.logo)!!))
                    .title("Your Location")
            )
        } else {
            Log.e("MapError", "Map is not initialized")
        }
    }
    private fun checkProximityToPickup(location: Location) {
        val pickupLatLng = getLatLngFromAddress(fragmentDatas.pickupLocation)

        pickupLatLng?.let {
            val pickupLocation = Location("").apply {
                latitude = it.latitude
                longitude = it.longitude
            }

            val distance = location.distanceTo(pickupLocation)
            Log.i("TAG", "$distance m")
            if (distance < 30 && !notificationShown) {
                showNotification()
                notificationShown = true
            }

        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        // Stop location updates when the fragment is destroyed
        fusedLocationClient.removeLocationUpdates(locationCallback)
    }
    override fun onViewCreated(
        view: View,
        savedInstanceState: Bundle?,
    ) {
        super.onViewCreated(view, savedInstanceState)
        val mapFragment =
            childFragmentManager.findFragmentById(R.id.mapFragment) as SupportMapFragment

        mapFragment.getMapAsync(this)
    }

    // Texts inside the fragment order details xml
    @SuppressLint("SetTextI18n")
    private fun FragmentOrderDetailsBinding.setDataToText() {
        textOrderType.text = fragmentDatas.orderType
        val priorityScheduled = ContextCompat.getColor(requireContext(), R.color.white)
        val priorityToday = ContextCompat.getColor(requireContext(), R.color.today_prio)
        val priorityNow = ContextCompat.getColor(requireContext(), R.color.now_prio)
        when (fragmentDatas.orderType) {
            context?.getString(R.string.order_type_now) -> {
                orderDetailsContainer.setBackgroundColor(priorityNow)
                textOrderSchedule.visibility = View.GONE
            }

            context?.getString(R.string.order_type_sched) -> {
                orderDetailsContainer.setBackgroundColor(priorityScheduled)
                textOrderSchedule.text = "${fragmentDatas.date}(${fragmentDatas.orderSched})"
            }

            context?.getString(R.string.order_type_today) -> {
                orderDetailsContainer.setBackgroundColor(priorityToday)
                textOrderSchedule.text = fragmentDatas.orderSched
            }
        }
        textPrice.text = fragmentDatas.price.toString()
        textPickUp.text =
            getCityFromAddress(
                requireContext(),
                fragmentDatas.pickupLocation,
            )
        textDropoff.text =
            getCityFromAddress(
                requireContext(),
                fragmentDatas.dropOffLocation,
            )
        val initialPrize = fragmentDatas.price
        val paid = fragmentDatas.price * 0.2
        val payablePrize = initialPrize - paid
        textPayableAmount.text = "$payablePrize"
        textAlreadyPaidAmount.text = "$paid"
    }

    // Accepting Order
    private fun FragmentOrderDetailsBinding.acceptOrder() {
        btnAcceptOrder.setOnClickListener {
            val url = "http://maps.google.com/maps?daddr=${fragmentDatas.pickupLocation}"
            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
            requireContext().startActivity(intent)
        }
    }

    // Geocoders to convert string address to
    private fun getCityFromAddress(
        context: Context,
        address: String,
    ): String? {
        val geocoder = Geocoder(context, Locale.getDefault())
        val addresses = geocoder.getFromLocationName(address, 1)
        return if (addresses!!.isNotEmpty()) {
            addresses[0].locality
        } else {
            null
        }
    }

    override fun onMapReady(googleMap: GoogleMap) {
        map = googleMap
        map.mapType = GoogleMap.MAP_TYPE_SATELLITE
        map.isMyLocationEnabled = true


        val fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
        // Perform geocoding asynchronously
        lifecycleScope.launch {

            // Define pickup and drop-off addresses
            val pickupAddress = fragmentDatas.pickupLocation
            val dropOffAddress = fragmentDatas.dropOffLocation

            val hue = 204.0F // Hue value for #0099FF
            val bitmapDescriptor = BitmapDescriptorFactory.defaultMarker(hue)

            val pickupLatLng = getLatLngFromAddress(pickupAddress)
            val dropOffLatLng = getLatLngFromAddress(dropOffAddress)

            if (pickupLatLng != null && dropOffLatLng != null) {
                // Add markers for pickup and drop-off locations

                map.addMarker(
                    MarkerOptions()
                        .position(pickupLatLng)
                        .icon(bitmapDescriptor)
                        .title("Pickup Location"),
                )

                map.addMarker(
                    MarkerOptions()
                        .position(
                            dropOffLatLng,
                        ).title("Drop-off Location"),
                )

                if (ActivityCompat.checkSelfPermission(
                        requireContext(),
                        Manifest.permission.ACCESS_FINE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        requireContext(),
                        Manifest.permission.ACCESS_COARSE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED
                ) {

                    return@launch
                }
                fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? ->
                    location?.let {

                        val pickUp = LatLng(pickupLatLng.latitude, pickupLatLng.longitude)
                        val currentLatLng = LatLng(it.latitude, it.longitude)

                        // Ill add something here if I want notification if I'm near at the pick up point
                        // Create Location objects


                        // Show notification if within 30 meters
                        lifecycleScope.launch {
                            do {

                                val pickupLocation = Location("").apply {
                                    latitude = pickUp.latitude
                                    longitude = pickUp.longitude
                                }

                                val currentLocation = Location("").apply {
                                    latitude = it.latitude
                                    longitude = it.longitude
                                }
                                // Calculate the distance
                                val distance = currentLocation.distanceTo(pickupLocation)
                                Log.i("TAG","HERE: $distance m")
                                delay(1500)
                                if (distance < 30) {
                                    showNotification()
                                    break
                                }
                            }while (distance < 30)
                        }

                    }
                }

                // Move the camera to show both points
                val boundsBuilder = LatLngBounds.Builder()
                boundsBuilder.include(pickupLatLng)
                boundsBuilder.include(dropOffLatLng)
                val bounds = boundsBuilder.build()
                val padding = 100
                map.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, padding))
            } else {
                Toast.makeText(requireContext(), "Address does not exist", Toast.LENGTH_SHORT).show()
            }
        }
    }


    private fun showNotification() {
        val channelId = "location_alert_channel"
        val channelName = "Location Alerts"
        val channel = NotificationChannel(
            channelId,
            channelName,
            NotificationManager.IMPORTANCE_HIGH
        ).apply {
            description = "Channel for location alerts"
        }
        val notificationManager: NotificationManager =
            requireContext().getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)

        val bubbleIntent = Intent(requireActivity(), NotificationActivity::class.java)
        val bubblePendingIntent = PendingIntent.getActivity(
            requireContext(),
            0,
            bubbleIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE
        )

        val bubbleData = NotificationCompat.BubbleMetadata.Builder()
            .setDesiredHeight(600)
            .setIcon(IconCompat.createWithResource(requireContext(), R.drawable.logo))
            .setIntent(bubblePendingIntent)
            .build()

        val builder = NotificationCompat.Builder(requireContext(), channelId)
            .setSmallIcon(R.drawable.logo)
            .setContentTitle("Location Alert")
            .setContentText("You are already near at pick up point, call the customer now.")
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setBubbleMetadata(bubbleData)

        with(NotificationManagerCompat.from(requireContext())) {
            if (ActivityCompat.checkSelfPermission(
                    requireContext(),
                    Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {

                return
            }
            notify(2, builder.build())
        }
    }

    private fun getBitmapFromDrawable(resId: Int): Bitmap? {
        var bitmap: Bitmap? = null
        val drawable = ResourcesCompat.getDrawable(resources, resId, null)
        if (drawable != null) {
            bitmap = Bitmap.createBitmap(150, 150, Bitmap.Config.ARGB_8888)
            val canvas = Canvas(bitmap)
            drawable.setBounds(0, 0, canvas.width, canvas.height)
            drawable.draw(canvas)
        }
        return bitmap
    }

    private fun getLatLngFromAddress(address: String): LatLng? =

        try {
            val geocoder = Geocoder(requireContext(), Locale.getDefault())
            val addresses = geocoder.getFromLocationName(address, 1)
            if (addresses!!.isNotEmpty()) {
                val location = addresses[0]
                LatLng(location.latitude, location.longitude)
            } else {
                null
            }
        } catch (e: IOException) {
            e.printStackTrace()
            null
        }

}
